<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="UnitTest.xsl"?> 

<truth name="H1">
	<desc>
		Exemple de <b>test unitaire</b>
	</desc>
	<test name="H2">
		<desc>DESC2</desc>
		<assertions name="H3">
			<desc>DESC3</desc>
			<value><![CDATA[
// Tableau vide
var a11 = new Array ()
var a12 = Array()
var a13 = []

// Tableau d'une longueur prédéfinie
var n = 10
var a21 = new Array ( n )
var a22 = Array( n )

// Tableau contenant des éléments
var m0 = "1"
var m1 = "2"
var a31 = new Array ( m0, m1 )
var a32 = Array( m0, m1 )
var a33 = [ m0, m1 ]
			]]></value>
			<assert><![CDATA[ a11.length === 0 ]]></assert>
			<assert><![CDATA[ a12.length === 0 ]]></assert>
			<assert><![CDATA[ a13.length === 0 ]]></assert>
			<assert><![CDATA[ a21.length === n ]]></assert>
			<assert><![CDATA[ a22.length === n ]]></assert>
			<assert><![CDATA[ a31.length === 2 ]]></assert>
			<assert><![CDATA[ a32.length === 2 ]]></assert>
			<assert><![CDATA[ a33.length === 2 ]]></assert>
			
			<assert><![CDATA[ Array.constructor === Function ]]></assert>
			<assert><![CDATA[ Array.prototype.constructor === Array ]]></assert>
			
			<assert><![CDATA[ a11.constructor === Array ]]></assert>
			<assert><![CDATA[ a12.constructor === Array ]]></assert>
			<assert><![CDATA[ a13.constructor === Array ]]></assert>
			<assert><![CDATA[ a21.constructor === Array ]]></assert>
			<assert><![CDATA[ a22.constructor === Array ]]></assert>
			<assert><![CDATA[ a31.constructor === Array ]]></assert>
			<assert><![CDATA[ a32.constructor === Array ]]></assert>
			<assert><![CDATA[ a33.constructor === Array ]]></assert>
		</assertions>
	</test>
	<test name="concat">
		<assertions>
			<value>
var a0 = [ 0,1,2,3,4,5 ]
var a1 = [ 6,7,8,9 ]
var a2 = a0.concat ( a1 )
			</value>
			<assert> a2.length === 10 </assert>
			<assert> a2.length === 11 </assert>
			<assert> a2 [0] === 0 </assert>
			<assert> a2 [9] === 9 </assert>
		</assertions>
		<assertions>
			<value> var a = [ 0,1,2,3,4,5 ].concat([]) </value>
			<assert> a.length === 6 </assert>
		</assertions>
	</test>
	<test name="sort">
		<assertions>
			<assert><![CDATA[ true ]]></assert>
			<assert><![CDATA[ false ]]></assert>
			<assert><![CDATA[ (function(){throw new Error ( "Coucou" )})() ]]></assert>
		</assertions>
		<assertions>
			<value><![CDATA[
var o1 = { nId: 1, nParentId: 1 }
var o2 = { nId: 2, nParentId: 1 }
var a = [ o1 , o2 ]
var f = function ( m1 , m2 ){
	return ( m1[ 'nParentId' ] > m2[ 'nParentId' ] )
		? 1
		: ( m1[ 'nParentId' ] < m2[ 'nParentId' ]
			? -1
			: 0 );
	}
a.sort( f )
			]]></value>
			<assert><![CDATA[ a[0].nId === Browser.isChrome ? 2 : 1 ]]></assert>
			<assert><![CDATA[ a[1].nId === Browser.isChrome ? 1 : 2 ]]></assert>
		</assertions>
	</test>
</truth>